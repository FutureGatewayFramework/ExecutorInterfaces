/**************************************************************************
Copyright (c) 2011:
Istituto Nazionale di Fisica Nucleare (INFN), Italy
See http://www.infn.it for details on the copyright holders.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
@author <a href="mailto:riccardo.bruno@ct.infn.it">Riccardo Bruno</a>(INFN)
****************************************************************************/
package it.infn.ct;

import java.util.Date;
import java.util.TimeZone;
import java.text.SimpleDateFormat;
import java.lang.reflect.Constructor;
import org.apache.log4j.Logger;
import org.apache.log4j.BasicConfigurator;


/**
 * ExecutorInterface interface class to generate specific executor interfaces
 *
 */
public interface ExecutorInterface {

    String Status = "UNKNOWN";
    SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssz" );

    /**
     * Logger object.
     */
    public static final Logger LOG = Logger.getLogger(ExecutorInterface.class.getName());
    /**
     * Line separator constant.
     */
    public static String LS = System.getProperty("line.separator");


    /**
     * Supported executor interface actions.
     */
    public enum EIActions {
        /**
         * Release all task resources and any reference to it.
         */
        CLEAN,
        /**
         * Submit a task on a targeted infrastructure.
         */
        SUBMIT,
        /**
         * Get the status of a task (unused; no reference to API specs).
         */
        GETSTATUS,
        /**
         * Get the output of a task (unused; no reference to API specs).
         */
        GETOUTPUT,
        /**
         * Cancel the execution of a task (unused; no reference to API specs).
         */
        CANCEL,
        /**
         * Delete the reference of a task (unused)
         */
        DELETE,
    }

    /**
     * Allow the instantiation of the ExecutorInterface by its name
     * @param eiName
     * @return
     */
    public static ExecutorInterface getExecutorInterface(String eiName) {

        ft.setTimeZone(TimeZone.getTimeZone("UTC"));

        try {
            Class<?> eiClass = Class.forName(eiName);
            Constructor<?> constructor = eiClass.getConstructor();
            return (ExecutorInterface) constructor.newInstance();
        } catch (ReflectiveOperationException e) {
            LOG.error("Could not found executor interface named: '" + eiName + "'");
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Perform the given executor interface action
     * @param cmd The ExecutorInterface action to perform
     * @param eiInstance ExecutorInterface instance
     * @throws ExecutorInterfaceException
     */
    public static void Exec(String action, ExecutorInterface eiInstance)
        throws ExecutorInterfaceException {
        switch(EIActions.valueOf(action)) {
            case CLEAN: eiInstance.Clean();
            break;
            case SUBMIT: eiInstance.Submit();
            break;
            case GETSTATUS: eiInstance.getStatus();
            break;
            case GETOUTPUT: eiInstance.getOutput();
            break;
            case CANCEL: eiInstance.Cancel();
            break;
            case DELETE: eiInstance.Delete();
            break;
            default:
                throw new ExecutorInterfaceException("Unknown action '" + action + "'");
        }
    }

    /**
     * Cleanup any static reference of a performed execution
     */
    public void Clean();

    /**
     * Perform 'task' execution
     */
    public void Submit();

    /**
     * Retrieve the status of perfomed execution
     */
    public void getStatus();

    /**
     * Retrieve any output generated by execution
     */
    public void getOutput();

    /**
     * Cancel execution
     */
    public void Cancel();

    /**
     * Delete any execution reference (unused)
     */
    public void Delete();


    /**
     * ExecutorInterfaceException Exception class
     */
    public class ExecutorInterfaceException extends Exception{
        private String message = null;
        public ExecutorInterfaceException() {
            super();
        }
        public ExecutorInterfaceException(String message) {
            super(message);
            this.message = message;
        }
        public ExecutorInterfaceException(Throwable cause) {
            super(cause);
        }
        @Override
        public String toString() {
            return message;
        }
        @Override
        public String getMessage() {
            return message;
        }
    }


    /**
     * Tester code
     */
    public static void main(String[] args) {
        // Enable logging
        BasicConfigurator.configure();

        /**
         * Define test executor interface
         *
        class testExecutorInterface implements ExecutorInterface {
            @Override
            public void Clean() {
                LOG.info("testExecutorInterface Clean method called.");
            }
            @Override
            public void Submit() {
                LOG.info("testExecutorInterface Submit method called.");
            }
            @Override
            public void getStatus() {
                LOG.info("testExecutorInterface getStatus method called.");
            }
            @Override
            public void getOutput() {
                LOG.info("testExecutorInterface getOutput method called.");
            }
            @Override
            public void Cancel() {
                LOG.info("testExecutorInterface Cancel method called.");
            }
            @Override
            public void Delete() {
                LOG.info("testExecutorInterface Delete method called.");
            }
        }

        // Use test executor interface
        testExecutorInterface tEI = new testExecutorInterface();
        **/

        ExecutorInterface ei = 
            ExecutorInterface.getExecutorInterface("it.infn.ct.testExecutorInterface");
        
        if(ei != null) {
            String[] testActions = {
                "CLEAN",
                "SUBMIT",
                "GETSTATUS",
                "GETOUTPUT",
                "CANCEL",
                "DELETE"
            };
            for(int i=0; i<testActions.length; i++) {
                try {
                    LOG.info("Calling command: '" + testActions[i] + "'");
                    ExecutorInterface.Exec(testActions[i], ei);
                } catch(ExecutorInterfaceException e) {
                    LOG.error("Unable to execute command '" + testActions[i] + "': " + e);
                }
            }
        }
    }
}
